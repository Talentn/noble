datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model Course {
  id String @id @default(uuid())
  userId String
  title String @db.Text
  description String? @db.Text
  imageUrl String? @db.Text
  price Float?
  isPublished Boolean @default(false)

  categoryId String?
  category Category? @relation(fields: [categoryId], references: [id])

  bacId String?
  bac Bac? @relation(fields: [bacId], references:[id])

  chapters Chapter[]
  attachments Attachment[]
  purchases Purchase[]
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  @@index([categoryId])
  @@index([bacId])
  @@fulltext([title])
}

model Category {
  id String @id @default(uuid())
  name String @unique
  courses Course[]

}

model Bac {
  id String @id @default(uuid())
  name String @unique
  courses Course[]
}

model Attachment {
  id String @id @default(uuid())
  name String
  url String @db.Text

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([courseId])
}

model Chapter {
  id String @id @default(uuid())
  title String
  description String? @db.Text
  videoUrl String? @db.Text
  position Int
  isPublished Boolean @default(false)
  isFreen Boolean @default(false)

  muxData muxData?

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
  @@index([courseId])
}

model muxData {
  id String @id @default(uuid())
  chapterId String @unique
  assetId String
  playbackId String?
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade )
}

model UserProgress{
  id String @id @default(uuid())
  userId String
  chapterId String

  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade )
  isCompleted Boolean @default(false)
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([chapterId])
  @@unique([userId, chapterId])
  }

  model Purchase {
    id String @id @default(uuid())
    userId String

    courseId String
    course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updateAt DateTime @updatedAt
    @@unique([userId, courseId])
    @@index([courseId])
  }

  //Konnect Costumer
  model Pack {
  id String @id @default(uuid())
  name String
  description String? @db.Text
  price Float
  isPublished Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


